
import os
import io
import numpy as np
import streamlit as st
from rembg import remove
from streamlit_drawable_canvas import st_canvas
from PIL import Image, ImageEnhance, ImageDraw, ImageFont, ImageFilter


# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("‚ú® ·ª®ng d·ª•ng ch·ªânh s·ª≠a ·∫£nh ‚ú®")

# T·∫£i ·∫£nh l√™n
uploaded_file = st.file_uploader("üìÇ T·∫£i ·∫£nh l√™n", type=["jpg", "jpeg", "png"])


if uploaded_file:
    # M·ªü ·∫£nh v√† chuy·ªÉn ƒë·ªïi sang ƒë·ªãnh d·∫°ng RGBA
    try:
        image = Image.open(uploaded_file).convert("RGBA")
    except Exception as e:
        st.error("T·ªáp kh√¥ng ph·∫£i l√† h√¨nh ·∫£nh h·ª£p l·ªá!")


    # T·∫°o m·ªôt slider cho ng∆∞·ªùi d√πng ƒë·ªÉ ƒëi·ªÅu ch·ªânh t·ª∑ l·ªá thu nh·ªè/ph√≥ng to ·∫£nh
    scale_factor = st.slider("Ch·ªânh t·ª∑ l·ªá ·∫£nh:", 0.01, 1.5, 1.0, 0.05)  # T·ª´ 10% ƒë·∫øn 150% v·ªõi b∆∞·ªõc 10%

    # T√≠nh to√°n k√≠ch th∆∞·ªõc m·ªõi
    width, height = image.size
    new_width = int(width * scale_factor)
    new_height = int(height * scale_factor)

    # Thu nh·ªè ho·∫∑c ph√≥ng to ·∫£nh theo t·ª∑ l·ªá
    image_resized = image.resize((new_width, new_height))

    # Hi·ªÉn th·ªã ·∫£nh c·∫ßn ch·ªânh s·ª≠a
    #st.image(image_resized, caption="·∫¢nh g·ªëc", use_container_width=False)

    # T·∫°o ·∫£nh t·∫°m ƒë·ªÉ l∆∞u thay ƒë·ªïi
    edited_image = image.copy()
        
    # Ti√™u ƒë·ªÅ thanh b√™n
    st.sidebar.title("üé® T√πy ch·ªânh ·∫£nh")

    if st.sidebar.checkbox("‚úÇÔ∏è C·∫Øt ·∫£nh"):
        st.sidebar.write("K√©o th·∫£ l·ªõp ph·ªß ƒë·ªÉ ch·ªçn v√πng c·∫Øt.")
        image_back = edited_image
        # Ch·ªçn lo·∫°i c·∫Øt
        shape_option = st.sidebar.radio(
            "Ch·ªçn h√¨nh d·∫°ng c·∫Øt",
            ["H√¨nh ch·ªØ nh·∫≠t", "H√¨nh tr√≤n"]
        )

        # N·∫øu ng∆∞·ªùi d√πng ch·ªçn c·∫Øt h√¨nh ch·ªØ nh·∫≠t
        if shape_option == "H√¨nh ch·ªØ nh·∫≠t":
            st.sidebar.write("K√©o th·∫£ l·ªõp ph·ªß ƒë·ªÉ ch·ªçn v√πng c·∫Øt.")
            canvas_result = st_canvas(
                fill_color="rgba(0, 0, 0, 0.1)",        # m√†u l·ªõp ph·ªß
                stroke_width=1,                         # ƒë·ªô d√†y vi·ªÅn
                stroke_color="#FFFFFF",                 # m√†u vi·ªÅn 
                background_image=image_back,          
                update_streamlit=True,
                height=image_back.height,
                width=image_back.width,
                drawing_mode="rect",                    # ch·∫ø ƒë·ªô v·∫Ω h√¨nh ch·ªØ nh·∫≠t
                key="crop_canvas_rect",                 # kh√≥a 
            )
            if canvas_result.json_data is not None:
                rects = canvas_result.json_data.get('objects', [])
                if rects:
                    rect = rects[0]
                    x1, y1 = rect['left'], rect['top']
                    width, height = rect['width'], rect['height']
                    x2, y2 = x1 + width, y1 + height
                    edited_image = edited_image.crop((x1, y1, x2, y2))

        # N·∫øu ng∆∞·ªùi d√πng ch·ªçn c·∫Øt h√¨nh tr√≤n
        elif shape_option == "H√¨nh tr√≤n":
            st.sidebar.write("K√©o th·∫£ l·ªõp ph·ªß ƒë·ªÉ ch·ªçn v√πng c·∫Øt h√¨nh tr√≤n.")
            canvas_result = st_canvas(
                fill_color="rgba(0, 0, 0, 0.1)",  
                stroke_width=1,                  
                stroke_color="#FFFFFF",        
                background_image=image_back,   
                update_streamlit=True,
                height=image_back.height,
                width=image_back.width,
                drawing_mode="circle",  
                key="crop_canvas_circle",
            )
            
            if canvas_result.json_data is not None:
                circles = canvas_result.json_data.get('objects', [])
                if circles:
                    # L·∫•y ƒë·ªëi t∆∞·ª£ng v√≤ng tr√≤n ƒë·∫ßu ti√™n
                    circle = circles[0]
                    x, y = circle['left'], circle['top']
                    radius = circle['radius']
                    
                    # ƒê·∫£m b·∫£o b√°n k√≠nh l√† d∆∞∆°ng, kh√°c 0 v√† chuy·ªÉn ƒë·ªïi n√≥ th√†nh s·ªë nguy√™n
                    if radius <= 0:
                        st.error("H√¨nh tr√≤n kh√¥ng h·ª£p l·ªá.")
                    else:
                        radius = int(radius)
                        
                        # T·∫°o m·∫∑t n·∫° h√¨nh tr√≤n
                        mask = Image.new("L", (2 * radius, 2 * radius), 0)
                        draw = ImageDraw.Draw(mask)
                        draw.ellipse((0, 0, 2 * radius, 2 * radius), fill=255)
                        
                        # C·∫Øt h√¨nh ·∫£nh b·∫±ng m·∫∑t n·∫° h√¨nh tr√≤n
                        cropped_image = edited_image.crop((x, y, x + 2 * radius, y + 2 * radius))
                        
                        # T·∫°o ·∫£nh m·ªõi n·ªÅn trong su·ªët cho ·∫£nh c·∫Øt h√¨nh tr√≤n
                        circular_image = Image.new("RGBA", (2 * radius, 2 * radius), (255, 255, 255, 0))
                        circular_image.paste(cropped_image, (0, 0), mask)
                        
                        # Update the edited image
                        edited_image = circular_image

    
    # B·ªô l·ªçc ch·ªânh s·ª≠a
    if st.sidebar.checkbox("üéõÔ∏è B·ªô l·ªçc"):
        st.sidebar.write("üîß ƒêi·ªÅu ch·ªânh c√°c th√¥ng s·ªë ·∫£nh.")
        
        # L∆∞u ·∫£nh g·ªëc ƒë·ªÉ kh√¥i ph·ª•c l·∫°i
        image_goc = image.copy()
        st.session_state.original_image = edited_image.copy()

        # Thi·∫øt l·∫≠p gi√° tr·ªã trung t√≠nh cho c√°c th√¥ng s·ªë
        if "filters" not in st.session_state:
            st.session_state.filters = {
                "brightness": 1.0,
                "exposure": 0.0,
                "contrast": 1.0,
                "highlight": 0.0,
                "shadow": 0.0,
                "saturation": 1.0,
                "hue_shift": 0,
                "temperature": 0
            }

        # T·∫°o c√°c thanh tr∆∞·ª£t v·ªõi gi√° tr·ªã t·ª´ session state
        brightness = st.sidebar.slider("üåû ƒê·ªô s√°ng:", 0.0, 2.0, st.session_state.filters["brightness"], key="brightness")
        exposure = st.sidebar.slider("üîÜ ƒê·ªô ph∆°i s√°ng:", -1.0, 1.0, st.session_state.filters["exposure"], key="exposure")
        contrast = st.sidebar.slider("üåì T∆∞∆°ng ph·∫£n:", 0.0, 2.0, st.session_state.filters["contrast"], key="contrast")
        highlight = st.sidebar.slider("‚ú® V√πng s√°ng:", 0.0, 1.0, st.session_state.filters["highlight"], key="highlight")
        shadow = st.sidebar.slider("üåë ƒê·ªï b√≥ng:", 0.0, 1.0, st.session_state.filters["shadow"], key="shadow")
        saturation = st.sidebar.slider("üé® ƒê·ªô b√£o h√≤a:", 0.0, 2.0, st.session_state.filters["saturation"], key="saturation")
        hue_shift = st.sidebar.slider("üé≠ S·∫Øc th√°i:", -180, 180, st.session_state.filters["hue_shift"], key="hue_shift")
        temperature = st.sidebar.slider("üî• Nhi·ªát ƒë·ªô:", -100, 100, st.session_state.filters["temperature"], key="temperature")

        # C·∫≠p nh·∫≠t session state khi thanh tr∆∞·ª£t thay ƒë·ªïi
        st.session_state.filters.update({
            "brightness": brightness,
            "exposure": exposure,
            "contrast": contrast,
            "highlight": highlight,
            "shadow": shadow,
            "saturation": saturation,
            "hue_shift": hue_shift,
            "temperature": temperature
        })

        # √Åp d·ª•ng c√°c ch·ªânh s·ª≠a tr·ª±c ti·∫øp
        temp_image = st.session_state.original_image.copy()

        # Ch·ªânh ƒë·ªô s√°ng
        enhancer = ImageEnhance.Brightness(temp_image)
        temp_image = enhancer.enhance(st.session_state.filters["brightness"])

        # Ch·ªânh ƒë·ªô ph∆°i s√°ng
        if st.session_state.filters["exposure"] != 0:
            enhancer = ImageEnhance.Brightness(temp_image)
            temp_image = enhancer.enhance(1 + st.session_state.filters["exposure"])

        # Ch·ªânh t∆∞∆°ng ph·∫£n
        enhancer = ImageEnhance.Contrast(temp_image)
        temp_image = enhancer.enhance(st.session_state.filters["contrast"])

        # Ch·ªânh v√πng s√°ng
        highlight_enhanced = ImageEnhance.Brightness(temp_image)
        temp_image = highlight_enhanced.enhance(1 + st.session_state.filters["highlight"] * 0.5)

        # Ch·ªânh ƒë·ªï b√≥ng
        shadow_enhanced = ImageEnhance.Brightness(temp_image)
        temp_image = shadow_enhanced.enhance(1 - st.session_state.filters["shadow"] * 0.5)

        # Ch·ªânh ƒë·ªô b√£o h√≤a
        enhancer = ImageEnhance.Color(temp_image)
        temp_image = enhancer.enhance(st.session_state.filters["saturation"])

        # Ch·ªânh s·∫Øc th√°i
        if st.session_state.filters["hue_shift"] != 0:
            hsv_image = temp_image.convert("HSV")
            hsv_array = np.array(hsv_image)
            hsv_array[..., 0] = (hsv_array[..., 0].astype(int) + st.session_state.filters["hue_shift"]) % 360
            temp_image = Image.fromarray(hsv_array, mode="HSV").convert("RGBA")

        # Ch·ªânh nhi·ªát ƒë·ªô
        if st.session_state.filters["temperature"] != 0:
            r, g, b, a = temp_image.split()
            if st.session_state.filters["temperature"] > 0:  # TƒÉng nhi·ªát ƒë·ªô (·∫•m h∆°n)
                r = r.point(lambda i: min(255, i + st.session_state.filters["temperature"]))
            elif st.session_state.filters["temperature"] < 0:  # Gi·∫£m nhi·ªát ƒë·ªô (l·∫°nh h∆°n)
                b = b.point(lambda i: min(255, i + abs(st.session_state.filters["temperature"])))
            temp_image = Image.merge("RGBA", (r, g, b, a))

        # C·∫≠p nh·∫≠t ·∫£nh ƒë√£ ch·ªânh s·ª≠a
        edited_image = temp_image

        # N√∫t tr·ªü v·ªÅ ·∫£nh g·ªëc
        if st.sidebar.button("‚Ü©Ô∏è Tr·ªü v·ªÅ ·∫£nh g·ªëc"):
            # ƒê·∫∑t l·∫°i session state v√† thanh tr∆∞·ª£t
            st.session_state.filters.update( {
                "brightness": 1.0,
                "exposure": 0.0,
                "contrast": 1.0,
                "highlight": 0.0,
                "shadow": 0.0,
                "saturation": 1.0,
                "hue_shift": 0,
                "temperature": 0
            })
            st.rerun()  # T·∫£i l·∫°i giao di·ªán ƒë·ªÉ ƒë·ªìng b·ªô
            edited_image = image_goc
            
    # L√†m m·ªù
    if st.sidebar.checkbox("üå´Ô∏è L√†m m·ªù"):
        blur_radius = st.sidebar.slider("ƒê·ªô m·ªù :", 0, 10, 2)
        edited_image = edited_image.filter(ImageFilter.GaussianBlur(blur_radius))


    # X√≥a n·ªÅn
    if st.sidebar.checkbox("üö´ X√≥a n·ªÅn"):
        st.sidebar.write("‚è≥ X√≥a n·ªÅn ƒëang ƒë∆∞·ª£c th·ª±c hi·ªán...")
        image_bytes = io.BytesIO()
        edited_image.save(image_bytes, format="PNG")
        image_bytes = image_bytes.getvalue()
        edited_image = Image.open(io.BytesIO(remove(image_bytes)))

    # V·∫Ω t·ª± do
    if st.sidebar.checkbox("üñåÔ∏è V·∫Ω t·ª± do"):
        st.sidebar.write("üñ±Ô∏è Nh·∫•n chu·ªôt v√† k√©o ƒë·ªÉ v·∫Ω.")
        
        # ƒêi·ªÅu ch·ªânh th√¥ng s·ªë v·∫Ω
        stroke_width = st.sidebar.slider("üñçÔ∏è ƒê·ªô r·ªông n√©t v·∫Ω:", 1, 20, 3)
        stroke_color = st.sidebar.color_picker("üé® M√†u n√©t v·∫Ω:", "#ff0000")

        image_back = edited_image
        
        # Th·ª±c hi·ªán v·∫Ω t·ª± do
        canvas_result = st_canvas(
            fill_color="rgba(255, 165, 0, 0.3)",  # M√†u t√¥
            stroke_width=stroke_width,           # ƒê·ªô r·ªông n√©t v·∫Ω
            stroke_color=stroke_color,           # M√†u n√©t v·∫Ω
            background_image=image_back,       # ·∫¢nh n·ªÅn
            update_streamlit=True,
            height=image_back.height,
            width=image_back.width,
            drawing_mode="freedraw",
            key="canvas",
        )

        # Ki·ªÉm tra n·∫øu c√≥ d·ªØ li·ªáu t·ª´ canvas
        if canvas_result and canvas_result.image_data is not None:
            # L·∫•y c√°c n√©t v·∫Ω t·ª´ canvas
            drawing_data = canvas_result.image_data.astype(np.uint8)

            # K·∫øt h·ª£p n√©t v·∫Ω v·ªõi ·∫£nh g·ªëc
            drawing_image = Image.fromarray(drawing_data)
            combined_image = Image.alpha_composite(edited_image.convert("RGBA"), drawing_image.convert("RGBA"))
            
            # C·∫≠p nh·∫≠t ·∫£nh ƒë√£ ch·ªânh s·ª≠a
            edited_image = combined_image.convert("RGB")

    # Th√™m ch·ªØ
    if st.sidebar.checkbox("‚úçÔ∏è Th√™m ch·ªØ"):
        text = st.sidebar.text_input("Nh·∫≠p vƒÉn b·∫£n:")
        x = st.sidebar.slider("X:", 0, edited_image.width, 10)
        y = st.sidebar.slider("Y:", 0, edited_image.height, 10)
        font_size = st.sidebar.slider("K√≠ch th∆∞·ªõc ch·ªØ:", 10, 200, 20)
        text_color = st.sidebar.color_picker("üé® M√†u ch·ªØ:", "#000000")  # Ch·ªçn m√†u ch·ªØ
        
        font = ImageFont.load_default(font_size)
        
        # Th√™m ch·ªØ v√†o ·∫£nh
        draw = ImageDraw.Draw(edited_image)
        if text:
            draw.text((x, y), text, font=font, fill=text_color)  # √Åp d·ª•ng m√†u ch·ªØ

    # Ki·ªÉm tra n·∫øu c√≥ checkbox "Th√™m icon"
    if st.sidebar.checkbox("üìç Th√™m icon"):
        
         # ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c ch·ª©a c√°c icon
        icons_path = "icon/"

        # L·∫•y danh s√°ch file icon t·ª´ th∆∞ m·ª•c
        icon_files = [f for f in os.listdir(icons_path) if f.endswith(('.png', '.jpg'))]

        # Hi·ªÉn th·ªã t·∫•t c·∫£ icon d∆∞·ªõi d·∫°ng l∆∞·ªõi nh·ªè (preview)
        st.sidebar.write("## Preview Icon:")
        col1, col2, col3, col4 = st.sidebar.columns(4)  # Hi·ªÉn th·ªã icon trong 4 c·ªôt
        selected_icons = []  # Danh s√°ch c√°c icon ƒë∆∞·ª£c ch·ªçn

        # Hi·ªÉn th·ªã icon v√† th√™m checkbox k√®m s·ªë th·ª© t·ª±
        for i, icon_file in enumerate(icon_files):
            icon_path = os.path.join(icons_path, icon_file)
            icon_thumbnail = Image.open(icon_path).convert("RGBA").resize((40, 40))

            # Hi·ªÉn th·ªã icon trong c√°c c·ªôt
            with [col1, col2, col3, col4][i % 4]:
                st.image(icon_thumbnail, use_container_width=True)
                
                # Checkbox v·ªõi s·ªë th·ª© t·ª±
                if st.checkbox(f"{i + 1}", key=icon_file):
                    selected_icons.append((i + 1, icon_file))

        # Hi·ªÉn th·ªã thanh ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc cho t·ª´ng icon ƒë∆∞·ª£c ch·ªçn
        if selected_icons:
            for index, selected_icon in selected_icons:
                st.sidebar.write(f"### Icon {index}")
                icon_path = os.path.join(icons_path, selected_icon)
                icon = Image.open(icon_path).convert("RGBA")

                # Cho ph√©p ng∆∞·ªùi d√πng ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc cho m·ªói icon
                icon_size = st.sidebar.slider(f"K√≠ch th∆∞·ªõc icon {index}:", 10, 400, 50, key=f"size_{selected_icon}")
                icon = icon.resize((icon_size, icon_size))

                # C·∫≠p nh·∫≠t thanh tr∆∞·ª£t v·ªõi gi√° tr·ªã nh·∫≠p v√†o (X v√† Y)
                x_input = st.sidebar.text_input(f"Nh·∫≠p t·ªça ƒë·ªô X cho icon {index}:", "0")
                y_input = st.sidebar.text_input(f"Nh·∫≠p t·ªça ƒë·ªô Y cho icon {index}:", "0")

                try:
                    x = int(x_input)
                except ValueError:
                    x = 0

                try:
                    y = int(y_input)
                except ValueError:
                    y = 0

                # ƒêi·ªÅu ch·ªânh thanh tr∆∞·ª£t X v√† Y
                x = st.sidebar.slider(f"X cho icon {index}:", 0, 2000, x, key=f"x_{selected_icon}")
                y = st.sidebar.slider(f"Y cho icon {index}:", 0, 2000, y, key=f"y_{selected_icon}")

                edited_image.paste(icon, (x, y), icon)
                
        st.sidebar.write("üñºÔ∏è Ch·ªçn c√°c icon t·ª´ th∆∞ vi·ªán ho·∫∑c t·∫£i l√™n icon m·ªõi.")

        # Ch·ª©c nƒÉng t·∫£i l√™n nhi·ªÅu ·∫£nh icon t·ª´ m√°y t√≠nh ng∆∞·ªùi d√πng
        uploaded_files = st.sidebar.file_uploader("T·∫£i ·∫£nh icon t·ª´ m√°y t√≠nh", type=["png", "jpg", "jpeg"], accept_multiple_files=True)
        
        if uploaded_files:
            # L·∫∑p qua t·ª´ng t·ªáp ƒë∆∞·ª£c t·∫£i l√™n
            for index, uploaded_file in enumerate(uploaded_files, start=1):
                # M·ªü ·∫£nh t·∫£i l√™n v√† hi·ªÉn th·ªã
                uploaded_icon = Image.open(uploaded_file).convert("RGBA")
                st.sidebar.image(uploaded_icon, caption=f"·∫¢nh t·∫£i l√™n {index}", use_container_width=True)

                # Cho ph√©p ng∆∞·ªùi d√πng ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc ·∫£nh t·∫£i l√™n
                icon_size = st.sidebar.slider(f"K√≠ch th∆∞·ªõc ·∫£nh t·∫£i l√™n {index}:", 10, 400, 50, key=f"size_uploaded_icon_{index}")
                uploaded_icon = uploaded_icon.resize((icon_size, icon_size))

                # Nh·∫≠p t·ªça ƒë·ªô v√† c·∫≠p nh·∫≠t thanh tr∆∞·ª£t
                x_input = st.sidebar.text_input(f"Nh·∫≠p t·ªça ƒë·ªô X cho ·∫£nh t·∫£i l√™n {index}:", "0", key=f"x_input_uploaded_icon_{index}")
                y_input = st.sidebar.text_input(f"Nh·∫≠p t·ªça ƒë·ªô Y cho ·∫£nh t·∫£i l√™n {index}:", "0", key=f"y_input_uploaded_icon_{index}")

                try:
                    x = int(x_input)
                except ValueError:
                    x = 0

                try:
                    y = int(y_input)
                except ValueError:
                    y = 0

                # ƒêi·ªÅu ch·ªânh thanh tr∆∞·ª£t X v√† Y
                x = st.sidebar.slider(f"X cho ·∫£nh t·∫£i l√™n {index}:", 0, 2000, x, key=f"x_uploaded_icon_{index}")
                y = st.sidebar.slider(f"Y cho ·∫£nh t·∫£i l√™n {index}:", 0, 2000, y, key=f"y_uploaded_icon_{index}")

                # D√°n ·∫£nh t·∫£i l√™n v√†o ·∫£nh g·ªëc (gi·∫£ s·ª≠ ·∫£nh g·ªëc l√† `edited_image`)
                edited_image.paste(uploaded_icon, (x, y), uploaded_icon)

    # L·∫≠t ·∫£nh
    flip_vertical = st.sidebar.checkbox("üîÅ L·∫≠t d·ªçc")
    flip_horizontal = st.sidebar.checkbox("üîÑ L·∫≠t ngang")
    if flip_vertical:
        edited_image = edited_image.transpose(Image.FLIP_TOP_BOTTOM)
    if flip_horizontal:
        edited_image = edited_image.transpose(Image.FLIP_LEFT_RIGHT)
        
   # Xoay ·∫£nh
    if st.sidebar.checkbox("üå´Ô∏è Xoay ·∫£nh"):
        # L∆∞u ·∫£nh g·ªëc ƒë·ªÉ kh√¥i ph·ª•c l·∫°i
        if "original__image" not in st.session_state:
            st.session_state.original__image = edited_image.copy()
        rotation_angle = st.sidebar.slider("üé° Xoay ·∫£nh (ƒë·ªô):", -180, 180, 0)
        if rotation_angle != 0:
            edited_image = edited_image.rotate(rotation_angle, expand=True)

        if st.sidebar.button("‚Ü©Ô∏è Tr·ªü v·ªÅ ·∫£nh g·ªëc"):
            edited_image = st.session_state.original__image.copy()

    # T√≠nh to√°n k√≠ch th∆∞·ªõc m·ªõi
    width, height = edited_image.size
    edited_image_resized = edited_image.resize((new_width, new_height))
       
    # Hi·ªÉn th·ªã ·∫£nh ƒë√£ ch·ªânh s·ª≠a
    st.image(edited_image_resized, caption="·∫¢nh ƒë√£ ch·ªânh s·ª≠a", use_container_width=False)

    # L·ª±a ch·ªçn ƒë·ªãnh d·∫°ng t·∫£i xu·ªëng
    download_format = st.sidebar.selectbox("Ch·ªçn ƒë·ªãnh d·∫°ng t·∫£i xu·ªëng", ["PNG", "JPG"])
    if download_format == "JPG":
        buf = io.BytesIO()
        edited_image.convert("RGB").save(buf, format="JPEG")  # Chuy·ªÉn sang JPEG n·∫øu ch·ªçn
    else:
        buf = io.BytesIO()
        edited_image.save(buf, format="PNG")  # M·∫∑c ƒë·ªãnh l√† PNG
    byte_im = buf.getvalue()
    st.download_button(
        label="üíæ T·∫£i ·∫£nh ƒë√£ ch·ªânh s·ª≠a",
        data=byte_im,
        file_name=f"edited_image.{download_format.lower()}",
        mime=f"image/{download_format.lower()}",
    )
